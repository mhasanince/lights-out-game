{"version":3,"sources":["Square.js","LightController.js","Board.js","Menu.js","App.js","serviceWorker.js","index.js"],"names":["Square","handleClick","props","click","index","style","this","on","className","onClick","Component","lightController","idx","size","Board","state","board","Array","fill","componentDidMount","randIdx","length","Math","floor","randNum","random","includes","push","console","log","newBoard","map","setState","val","squares","key","Menu","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iUAGqBA,G,iNACnBC,YAAc,WACZ,EAAKC,MAAMC,MAAM,EAAKD,MAAME,Q,wEAI5B,IAAMC,EAAK,iBAAaC,KAAKJ,MAAMK,GAAK,YAAc,IACtD,OAAO,yBAAKC,UAAWH,EAAOI,QAASH,KAAKL,kB,GAPZS,cCHpC,SAASC,EAAgBC,EAAKC,GAC5B,OAAY,IAARD,EAEK,CAACA,EAAKA,EAAM,EAAGA,EAAMC,GACnBD,IAAQC,EAAO,EAEjB,CAACD,EAAKA,EAAM,EAAGA,EAAMC,GACnBD,IAAQC,GAAQA,EAAO,GAEzB,CAACD,EAAKA,EAAMC,EAAMD,EAAM,GACtBA,IAAQC,EAAOA,EAAO,EAExB,CAACD,EAAKA,EAAMC,EAAMD,EAAM,GACtBA,EAAM,GAAKA,EAAMC,EAAO,EAE1B,CAACD,EAAKA,EAAM,EAAGA,EAAM,EAAGA,EAAMC,GAC5BD,EAAMC,IAAS,EAEjB,CAACD,EAAKA,EAAM,EAAGA,EAAMC,EAAMD,EAAMC,GAC/BD,EAAMC,IAASA,EAAO,EAExB,CAACD,EAAKA,EAAM,EAAGA,EAAMC,EAAMD,EAAMC,GAC/BD,EAAMC,GAAQA,EAAO,IAAMD,EAAMC,EAAOA,EAAO,EAEjD,CAACD,EAAKA,EAAM,EAAGA,EAAM,EAAGA,EAAMC,GAE9B,CAACD,EAAKA,EAAM,EAAGA,EAAM,EAAGA,EAAMC,EAAMD,EAAMC,G,UCrBhCC,E,2MACnBC,MAAQ,CACNC,MAAOC,MAAM,EAAKf,MAAMW,KAAO,EAAKX,MAAMW,MAAMK,MAAK,I,EAGvDC,kBAAoB,WAGlB,IAFA,IAAMN,EAAO,EAAKX,MAAMW,KACpBO,EAAU,GACPA,EAAQC,OAASC,KAAKC,MAAOV,EAAOA,EAAQ,IAAI,CACrD,IAAMW,EAAUF,KAAKC,MAAMD,KAAKG,UAAYZ,EAAOA,IAC9CO,EAAQM,SAASF,IAAUJ,EAAQO,KAAKH,GAE/CI,QAAQC,IAAIT,GACZ,IAAIU,EAAW,EAAKf,MAAMC,MAC1BI,EAAQW,KAAI,SAACnB,GAAD,OAAUkB,EAASlB,IAAO,KACtC,EAAKoB,SAAS,CACZhB,MAAOc,K,EAIX3B,MAAQ,SAACC,GACP,IAAI0B,EAAW,EAAKf,MAAMC,MACVL,EAAgBP,EAAO,EAAKF,MAAMW,MAC1CkB,KAAI,SAACE,GAAD,OAAUH,EAASG,IAAQH,EAASG,MAChD,EAAKD,SAAS,CACZhB,MAAOc,K,wEAID,IAAD,OACDI,EAAU5B,KAAKS,MAAMC,MAAMe,KAAI,SAACE,EAAKrB,GAAN,OACnC,kBAAC,EAAD,CAAQuB,IAAKvB,EAAKR,MAAOQ,EAAKL,GAAI0B,EAAK9B,MAAO,EAAKA,WAErD,OAAO,yBAAKK,UAAU,mBAAmB0B,O,GAjCVxB,aCHd0B,E,iLAEjB,OACE,yBAAK5B,UAAU,kBACb,2CACA,yBAAKA,UAAU,cACb,gD,GANwBE,a,MCenB2B,MAZf,WACE,OACE,yBAAK7B,UAAU,OACb,wBAAIA,UAAU,cAAd,mBACA,yBAAKA,UAAU,eACb,kBAAC,EAAD,CAAOK,KAAM,IACb,kBAAC,EAAD,SCCYyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1B,QAAQ0B,MAAMA,EAAMC,c","file":"static/js/main.3c395e24.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Square.css';\n\nexport default class Square extends Component {\n  handleClick = () => {\n    this.props.click(this.props.index);\n  };\n\n  render() {\n    const style = `Square ${this.props.on ? 'Square-on' : ''}`;\n    return <div className={style} onClick={this.handleClick}></div>;\n  }\n}\n","function lightController(idx, size) {\n  if (idx === 0) {\n    // top-left corner\n    return [idx, idx + 1, idx + size];\n  } else if (idx === size - 1) {\n    // top-right corner\n    return [idx, idx - 1, idx + size];\n  } else if (idx === size * (size - 1)) {\n    // bottom-left corner\n    return [idx, idx - size, idx + 1];\n  } else if (idx === size * size - 1) {\n    // bottom-right coner\n    return [idx, idx - size, idx - 1];\n  } else if (idx > 0 && idx < size - 1) {\n    // top side\n    return [idx, idx - 1, idx + 1, idx + size];\n  } else if (idx % size === 0) {\n    // left side\n    return [idx, idx + 1, idx - size, idx + size];\n  } else if (idx % size === size - 1) {\n    // right side\n    return [idx, idx - 1, idx - size, idx + size];\n  } else if (idx > size * (size - 1) && idx < size * size - 1) {\n    // bottom side\n    return [idx, idx - 1, idx + 1, idx - size];\n  } else {\n    return [idx, idx - 1, idx + 1, idx - size, idx + size];\n  }\n}\n\nexport { lightController };\n","import React, { Component } from 'react';\nimport Square from './Square';\nimport { lightController } from './LightController';\nimport './Board.css';\n\nexport default class Board extends Component {\n  state = {\n    board: Array(this.props.size * this.props.size).fill(false),\n  };\n\n  componentDidMount = () => {\n    const size = this.props.size;\n    let randIdx = [];\n    while (randIdx.length < Math.floor((size * size) / 3)) {\n      const randNum = Math.floor(Math.random() * (size * size));\n      if (!randIdx.includes(randNum)) randIdx.push(randNum);\n    }\n    console.log(randIdx);\n    let newBoard = this.state.board;\n    randIdx.map((idx) => (newBoard[idx] = true));\n    this.setState({\n      board: newBoard,\n    });\n  };\n\n  click = (index) => {\n    let newBoard = this.state.board;\n    const squares = lightController(index, this.props.size);\n    squares.map((val) => (newBoard[val] = !newBoard[val]));\n    this.setState({\n      board: newBoard,\n    });\n  };\n\n  render() {\n    const squares = this.state.board.map((val, idx) => (\n      <Square key={idx} index={idx} on={val} click={this.click} />\n    ));\n    return <div className=\"Flex-item Board\">{squares}</div>;\n  }\n}\n","import React, { Component } from 'react';\n\nexport default class Menu extends Component {\n  render() {\n    return (\n      <div className=\"Flex-item Menu\">\n        <button>Restart</button>\n        <div className=\"Menu-click\">\n          <h4>Clikced: 0</h4>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport Board from './Board';\nimport Menu from './Menu';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1 className=\"App-header\">Lights Out Game</h1>\n      <div className=\"App-content\">\n        <Board size={5} />\n        <Menu />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}